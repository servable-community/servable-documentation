variables:
  IMAGE_NAME: servable/documentation
  IMAGE_TAG: "0.1"
  # When using dind service, you must instruct Docker to talk with
  # the daemon started inside of the service. The daemon is available
  # with a network connection instead of the default
  # /var/run/docker.sock socket.
  DOCKER_HOST: tcp://docker:2376
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/services/#accessing-the-services.
  # If you're using GitLab Runner 12.7 or earlier with the Kubernetes executor and Kubernetes 1.6 or earlier,
  # the variable must be set to tcp://localhost:2376 because of how the
  # Kubernetes executor connects services to the job container
  # DOCKER_HOST: tcp://localhost:2376
  #
  # Specify to Docker where to create the certificates. Docker
  # creates them automatically on boot, and creates
  # `/certs/client` to share between the service and job
  # container, thanks to volume mount from config.toml
  DOCKER_TLS_CERTDIR: "/certs"
  # These are usually specified by the entrypoint, however the
  # Kubernetes executor doesn't run entrypoints
  # https://gitlab.com/gitlab-org/gitlab-runner/-/issues/4125
  DOCKER_TLS_VERIFY: 0
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"

stages:
  # - test
  - build
  - deploy

# run_tests:
#   stage: test
#   image: python:3.9-slim-buster
#   before_script:
#     - apt-get update && apt-get install make
#   script:
#     - make test

build_image:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    # - sudo chown -R `whoami`: .
    - sudo chown -R gitlab-runner:gitlab-runner .
    - docker info
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY/$IMAGE_NAME:$IMAGE_TAG .
    - docker push $CI_REGISTRY/$IMAGE_NAME:$IMAGE_TAG
# deploy:
#   stage: deploy
#   before_script:
#     - chmod 400 $SSH_KEY
#   script:
#     - ssh -o StrictHostKeyChecking=no -i $SSH_KEY root@161.35.223.117 "
#         docker login -u $REGISTRY_USER -p $REGISTRY_PASS &&
#         docker ps -aq | xargs docker stop | xargs docker rm &&
#         docker run -d -p 5000:5000 $IMAGE_NAME:$IMAGE_TAG"
